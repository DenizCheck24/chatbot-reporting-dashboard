#!/bin/bash

# Chatbot Dashboard Launcher
# This app opens the already-installed dashboard or starts it if not running

# Configuration
INSTALL_DIR="${HOME}/Desktop/chatbot-reporting-dashboard"
DASHBOARD_URL="http://localhost:3000"
DASHBOARD_PORT="3000"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to show dialog on macOS
show_dialog() {
    local title="$1"
    local message="$2"
    local type="${3:-informational}"
    
    osascript -e "display dialog \"$message\" with title \"$title\" with icon $type buttons {\"OK\"} default button \"OK\""
}

show_error_dialog() {
    local title="$1"
    local message="$2"
    
    osascript -e "display dialog \"$message\" with title \"$title\" with icon stop buttons {\"OK\"} default button \"OK\""
}

show_choice_dialog() {
    local title="$1"
    local message="$2"
    
    result=$(osascript -e "display dialog \"$message\" with title \"$title\" with icon question buttons {\"Cancel\", \"OK\"} default button \"OK\"" 2>/dev/null || echo "Cancel")
    echo "$result"
}

# Function to check if dashboard is installed
check_installation() {
    if [ ! -d "$INSTALL_DIR" ]; then
        return 1
    fi
    
    if [ ! -f "$INSTALL_DIR/package.json" ]; then
        return 1
    fi
    
    return 0
}

# Function to check if dashboard is already running
check_if_running() {
    # Check if port 3000 is in use
    if lsof -Pi :$DASHBOARD_PORT -sTCP:LISTEN -t >/dev/null 2>&1; then
        return 0
    fi
    return 1
}

# Function to check if dashboard is accessible
check_if_accessible() {
    # Try to reach the dashboard URL
    if curl -s --connect-timeout 3 "$DASHBOARD_URL" >/dev/null 2>&1; then
        return 0
    fi
    return 1
}

# Function to open browser to dashboard
open_dashboard() {
    print_status "Opening Chatbot Dashboard in browser..."
    
    # Open the dashboard URL in default browser
    open "$DASHBOARD_URL"
    
    # Wait a moment for the browser to load
    sleep 2
    
    # Try to bring browser to front
    osascript << 'EOF'
tell application "System Events"
    set frontApp to name of first application process whose frontmost is true
    if frontApp contains "Safari" or frontApp contains "Chrome" or frontApp contains "Firefox" or frontApp contains "Edge" then
        tell application frontApp to activate
    end if
end tell
EOF
}

# Function to start the dashboard
start_dashboard() {
    print_status "Starting Chatbot Dashboard..."
    
    show_dialog "Starting Dashboard" "The Chatbot Dashboard is starting up.\n\nThis will open a new Terminal window. Please wait for the dashboard to start, then it will open automatically in your browser."
    
    # Start the dashboard in a new Terminal window
    osascript << EOF
tell application "Terminal"
    activate
    do script "cd '$INSTALL_DIR' && echo 'ðŸš€ Starting Chatbot Dashboard...' && echo 'This will open in your browser automatically.' && echo '' && npm run dev"
end tell
EOF
    
    # Wait for the dashboard to start
    print_status "Waiting for dashboard to start..."
    local max_attempts=30
    local attempt=0
    
    while [ $attempt -lt $max_attempts ]; do
        if check_if_accessible; then
            print_success "Dashboard is ready!"
            sleep 1
            open_dashboard
            return 0
        fi
        
        sleep 1
        ((attempt++))
    done
    
    # If we get here, the dashboard didn't start in time
    show_error_dialog "Startup Timeout" "The dashboard is taking longer than expected to start.\n\nPlease check the Terminal window for any error messages, or visit http://localhost:3000 manually once it's ready."
    return 1
}

# Function to handle installation not found
handle_not_installed() {
    choice=$(show_choice_dialog "Dashboard Not Installed" "The Chatbot Dashboard is not installed on this computer.\n\nWould you like to install it now?")
    
    if [[ "$choice" == *"OK"* ]]; then
        # Redirect to installer
        show_dialog "Redirecting to Installer" "Opening the installer to set up the Chatbot Dashboard.\n\nPlease complete the installation, then use this launcher again."
        
        # Try to find and open an installer
        local script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
        
        if [ -f "$script_dir/Simple Installer.app/Contents/MacOS/installer" ]; then
            "$script_dir/Simple Installer.app/Contents/MacOS/installer"
        elif [ -f "$script_dir/mac-installer.command" ]; then
            "$script_dir/mac-installer.command"
        else
            # Fallback to web installer
            osascript << 'EOF'
tell application "Terminal"
    activate
    do script "echo 'ðŸš€ Installing Chatbot Dashboard...' && curl -fsSL https://raw.githubusercontent.com/timbrennecke/chatbot-reporting-dashboard/main/easy-install.sh | bash"
end tell
EOF
        fi
    fi
}

# Main function
main() {
    # Check if dashboard is installed
    if ! check_installation; then
        handle_not_installed
        exit 0
    fi
    
    # Check if dashboard is already running and accessible
    if check_if_running && check_if_accessible; then
        print_success "Dashboard is already running!"
        show_dialog "Dashboard Running" "The Chatbot Dashboard is already running.\n\nOpening it in your browser now."
        open_dashboard
        exit 0
    fi
    
    # Check if something is running on port 3000 but not accessible
    if check_if_running; then
        choice=$(show_choice_dialog "Port In Use" "Something is already running on port 3000, but the dashboard is not accessible.\n\nThis might be another application or a stuck process.\n\nWould you like to try starting the dashboard anyway?")
        
        if [[ "$choice" != *"OK"* ]]; then
            exit 0
        fi
    fi
    
    # Dashboard is installed but not running, so start it
    start_dashboard
}

# Handle script interruption
trap 'echo -e "\n${YELLOW}Launcher interrupted.${NC}"; exit 1' INT

# Run main function
main "$@"
