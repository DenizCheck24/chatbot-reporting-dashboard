#!/bin/bash

# Chatbot Dashboard Installer - Mac App Version
# This version is designed to be run by double-clicking on macOS

# Get the directory where this app bundle is located
APP_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
SCRIPT_DIR="$(dirname "$APP_DIR")"

# Configuration
REPO_URL="https://github.com/timbrennecke/chatbot-reporting-dashboard.git"
APP_NAME="chatbot-reporting-dashboard"
INSTALL_DIR="${HOME}/Desktop/${APP_NAME}"
NODE_MIN_VERSION="18"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to show dialog on macOS
show_dialog() {
    local title="$1"
    local message="$2"
    local type="${3:-informational}"
    
    osascript -e "display dialog \"$message\" with title \"$title\" with icon $type buttons {\"OK\"} default button \"OK\""
}

show_error_dialog() {
    local title="$1"
    local message="$2"
    
    osascript -e "display dialog \"$message\" with title \"$title\" with icon stop buttons {\"OK\"} default button \"OK\""
}

show_choice_dialog() {
    local title="$1"
    local message="$2"
    
    result=$(osascript -e "display dialog \"$message\" with title \"$title\" with icon question buttons {\"No\", \"Yes\"} default button \"Yes\"" 2>/dev/null || echo "No")
    echo "$result"
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check if Homebrew is available
homebrew_available() {
    command_exists brew || [ -f "/opt/homebrew/bin/brew" ] || [ -f "/usr/local/bin/brew" ]
}

# Function to setup PATH for Homebrew
setup_homebrew_path() {
    # Add Homebrew paths to current session
    export PATH="/opt/homebrew/bin:/usr/local/bin:$PATH"
}

# Function to check Node.js version
check_node_version() {
    # Ensure Homebrew paths are in PATH
    setup_homebrew_path
    
    if command_exists node; then
        local node_version=$(node -v | cut -d 'v' -f 2 | cut -d '.' -f 1)
        if [ "$node_version" -ge "$NODE_MIN_VERSION" ]; then
            return 0
        else
            return 1
        fi
    else
        return 1
    fi
}

# Function to install prerequisites automatically using Homebrew
install_prerequisites_automatically() {
    print_status "Installing prerequisites automatically..."
    
    # Check if Homebrew is installed (check common locations)
    BREW_PATH=""
    if command_exists brew; then
        BREW_PATH="brew"
    elif [ -f "/opt/homebrew/bin/brew" ]; then
        BREW_PATH="/opt/homebrew/bin/brew"
    elif [ -f "/usr/local/bin/brew" ]; then
        BREW_PATH="/usr/local/bin/brew"
    fi
    
    if [ -z "$BREW_PATH" ]; then
        show_dialog "Installing Homebrew" "First, we need to install Homebrew (the package manager for macOS).\n\nThis will open Terminal and may ask for your password.\n\nAfter installation completes, please run this installer again."
        
        # Install Homebrew with complete setup
        osascript << 'EOF'
tell application "Terminal"
    activate
    do script "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh) && echo '' && echo '=== HOMEBREW INSTALLATION COMPLETE ===' && echo 'Please CLOSE this Terminal window and run the Chatbot Dashboard Installer again.' && echo '' && read -p 'Press Enter to close this window...' && exit\""
end tell
EOF
        
        show_dialog "Homebrew Installation" "Homebrew installation has started in Terminal.\n\n⚠️ IMPORTANT: After the installation completes:\n1. Close the Terminal window\n2. Run this installer again\n\nThe installer will then proceed with installing Node.js automatically."
        exit 0
    fi
    
    # Install Node.js using Homebrew
    show_dialog "Installing Node.js" "Installing Node.js and npm using Homebrew.\n\nThis may take a few minutes..."
    
    # Use the correct Homebrew path and ensure PATH is set
    osascript << EOF
tell application "Terminal"
    activate
    do script "export PATH=\"/opt/homebrew/bin:/usr/local/bin:\$PATH\" && $BREW_PATH install node && echo '' && echo '=== NODE.JS INSTALLATION COMPLETE ===' && echo 'Please CLOSE this Terminal window and run the Chatbot Dashboard Installer again.' && echo '' && read -p 'Press Enter to close this window...' && exit"
end tell
EOF
    
    show_dialog "Installation Started" "Node.js installation has started in Terminal.\n\n⚠️ IMPORTANT: After the installation completes:\n1. Close the Terminal window\n2. Run this installer again\n\nThe installer will then proceed with the dashboard installation automatically."
    exit 0
}

# Function to show manual installation dialog
show_manual_install_dialog() {
    osascript << EOF
display dialog "Please install the required software manually:

🔧 Git: Download from https://git-scm.com/downloads
📦 Node.js: Download from https://nodejs.org/

For easier installation, you can also use Homebrew:
1. Install Homebrew: /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"
2. Install Git: brew install git
3. Install Node.js: brew install node

After installation, run this installer again." with title "Manual Installation Guide" with icon note buttons {"Open Git Download", "Open Node.js Download", "OK"} default button "OK"
EOF
    
    # Handle button clicks
    result=$?
    if [ $result -eq 0 ]; then
        # User clicked a button, open relevant pages
        open "https://git-scm.com/downloads" 2>/dev/null || true
        open "https://nodejs.org/" 2>/dev/null || true
    fi
}

# Function to check prerequisites
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    # Setup Homebrew path first
    setup_homebrew_path
    
    local missing_deps=""
    
    # Check Git
    if ! command_exists git; then
        missing_deps="${missing_deps}\n• Git"
    fi
    
    # Check Node.js
    if ! check_node_version; then
        missing_deps="${missing_deps}\n• Node.js v${NODE_MIN_VERSION}+"
    fi
    
    # Check npm (should come with Node.js)
    if ! command_exists npm; then
        missing_deps="${missing_deps}\n• npm"
    fi
    
    if [ -n "$missing_deps" ]; then
        # Show error dialog with installation options
        choice=$(osascript -e "display dialog \"The following software is required but not installed:${missing_deps}\n\nWould you like to install them automatically using Homebrew?\" with title \"Missing Prerequisites\" with icon caution buttons {\"Cancel\", \"Install Manually\", \"Auto Install\"} default button \"Auto Install\"" 2>/dev/null || echo "Cancel")
        
        if [[ "$choice" == *"Auto Install"* ]]; then
            install_prerequisites_automatically
        elif [[ "$choice" == *"Install Manually"* ]]; then
            show_manual_install_dialog
            exit 1
        else
            exit 1
        fi
    fi
    
    print_success "All prerequisites are met!"
}

# Function to check if dashboard is already installed
check_existing_installation() {
    if [ -d "$INSTALL_DIR" ] && [ -f "$INSTALL_DIR/package.json" ]; then
        return 0  # Installation exists
    else
        return 1  # No installation found
    fi
}

# Function to check for updates
check_for_updates() {
    print_status "Checking for updates..."
    
    if ! check_existing_installation; then
        show_error_dialog "No Installation Found" "No existing installation found. Please install first."
        return 1
    fi
    
    cd "$INSTALL_DIR"
    
    # Fetch latest changes from remote with error handling
    print_status "Fetching latest changes from GitHub..."
    
    # Try to fetch updates
    if git fetch origin main 2>/dev/null; then
        # Fetch successful - check for updates
        local local_commit=$(git rev-parse HEAD 2>/dev/null)
        local remote_commit=$(git rev-parse origin/main 2>/dev/null)
        
        if [ "$local_commit" = "$remote_commit" ]; then
            # No updates available
            osascript -e "display dialog \"✅ You already have the latest version!\n\nLocal:  $(echo $local_commit | cut -c1-8)\nRemote: $(echo $remote_commit | cut -c1-8)\n\nNo updates needed.\" with title \"Up to Date\" with icon note buttons {\"OK\"} default button \"OK\"" 2>/dev/null
            
            # Ask if user wants to open the dashboard anyway
            choice2=$(osascript -e "display dialog \"Would you like to open the dashboard now?\" with title \"Open Dashboard\" with icon question buttons {\"No\", \"Yes\"} default button \"Yes\"" 2>/dev/null || echo "No")
            if [[ "$choice2" == *"Yes"* ]]; then
                open_existing_dashboard
            fi
            return 0
        else
            # Updates available
            choice=$(osascript -e "display dialog \"🆕 Updates available!\n\nLocal version:  $(echo $local_commit | cut -c1-8)\nLatest version: $(echo $remote_commit | cut -c1-8)\n\nDo you want to update now?\" with title \"Update Available\" with icon note buttons {\"Cancel\", \"Update\"} default button \"Update\"" 2>/dev/null || echo "Cancel")
            
            if [[ "$choice" == *"Update"* ]]; then
                osascript -e "display dialog \"⬇️ Updating to latest version...\n\nThis may take a moment.\" with title \"Updating\" with icon note buttons {\"OK\"} default button \"OK\"" 2>/dev/null
                
                print_status "Updating to latest version..."
                git reset --hard origin/main
                
                print_status "Updating dependencies..."
                npm install
                
                osascript -e "display dialog \"🎉 Update completed successfully!\n\nThe dashboard is now up to date.\" with title \"Update Complete\" with icon note buttons {\"OK\"} default button \"OK\"" 2>/dev/null
                return 0
            else
                osascript -e "display dialog \"Update cancelled. Using current version.\" with title \"Update Cancelled\" with icon note buttons {\"OK\"} default button \"OK\"" 2>/dev/null
                return 1
            fi
        fi
    else
        # Fetch failed
        osascript -e "display dialog \"❌ Failed to fetch updates from GitHub.\n\nPossible causes:\n• No internet connection\n• GitHub is unreachable\n• Repository access issues\n\nPlease check your connection and try again.\" with title \"Update Check Failed\" with icon stop buttons {\"OK\"} default button \"OK\"" 2>/dev/null
        return 1
    fi
}

# Function to open existing dashboard
open_existing_dashboard() {
    print_status "Opening existing dashboard..."
    
    if ! check_existing_installation; then
        show_error_dialog "No Installation Found" "No existing installation found.\n\nPlease choose 'Check for Updates & Install' to install the dashboard first."
        return 1
    fi
    
    cd "$INSTALL_DIR"
    print_status "Starting Chatbot Dashboard..."
    
    show_dialog "Starting Dashboard" "✅ Starting Chatbot Dashboard...\n\nThe dashboard will open in your browser shortly.\nIf it doesn't open automatically, visit: http://localhost:3000\n\nTo stop the application, close the terminal window that opens."
    
    # Open Terminal and run the dev server
    osascript << EOF
tell application "Terminal"
    activate
    do script "cd '$INSTALL_DIR' && echo 'Starting Chatbot Dashboard...' && npm run dev"
end tell
EOF
    return 0
}

# Function to show main menu
show_main_menu() {
    local status_message=""
    local dialog_options=""
    local button_list=""
    local default_button=""
    
    if check_existing_installation; then
        status_message="✅ Existing installation found at:\n$INSTALL_DIR\n\n"
        dialog_options="Please choose an option:\n\n🚀 Just Open Dashboard - Open existing installation without checking for updates\n\n🔄 Check for Updates & Install - Check for GitHub repo updates and install/update as needed\n\n❌ Exit - Close the installer"
        button_list="{\"Exit\", \"Just Open\", \"Check Updates\"}"
        default_button="\"Check Updates\""
    else
        status_message="ℹ️ No existing installation found.\n\n"
        dialog_options="Please choose an option:\n\n📦 Install - Install the Chatbot Dashboard\n\n❌ Exit - Close the installer"
        button_list="{\"Exit\", \"Install\"}"
        default_button="\"Install\""
    fi
    
    choice=$(osascript -e "display dialog \"${status_message}${dialog_options}\" with title \"Chatbot Dashboard Installer\" with icon note buttons ${button_list} default button ${default_button}" 2>/dev/null || echo "Exit")
    
    case "$choice" in
        *"Just Open"*)
            open_existing_dashboard
            ;;
        *"Check Updates"*|*"Install"*)
            if check_existing_installation; then
                show_dialog "Starting Update Check" "🔍 Starting update check...\n\nThis will contact GitHub to check for updates."
                check_for_updates
                # Note: check_for_updates now handles its own dialog flow
            else
                show_dialog "Installing" "No existing installation found.\n\nStarting fresh installation..."
                return 1  # Proceed with fresh installation
            fi
            ;;
        *)
            show_dialog "Goodbye" "👋 Installation cancelled."
            exit 0
            ;;
    esac
    
    return 0
}

# Function to cleanup existing installation (legacy function, simplified)
cleanup_existing() {
    # This function is now handled by the menu system
    return 1
}

# Function to clone repository
clone_repository() {
    print_status "Cloning repository from GitHub..."
    mkdir -p "$(dirname "$INSTALL_DIR")"
    if git clone "$REPO_URL" "$INSTALL_DIR"; then
        cd "$INSTALL_DIR"
        print_success "Repository cloned successfully!"
    else
        show_error_dialog "Installation Failed" "Failed to clone the repository. Please check your internet connection and try again."
        exit 1
    fi
}

# Function to install dependencies
install_dependencies() {
    print_status "Installing dependencies..."
    if npm install; then
        print_success "Dependencies installed successfully!"
    else
        show_error_dialog "Installation Failed" "Failed to install dependencies. Please try again."
        exit 1
    fi
}

# Function to start the application
start_application() {
    print_status "Starting the application..."
    
    show_dialog "Installation Complete" "🎉 Chatbot Dashboard is ready!\n\nThe application will now start in your browser.\nIf it doesn't open automatically, visit: http://localhost:3000\n\nTo stop the application, close this terminal window or press Ctrl+C."
    
    # Open Terminal and run the dev server
    osascript << EOF
tell application "Terminal"
    activate
    do script "cd '$INSTALL_DIR' && echo 'Starting Chatbot Dashboard...' && npm run dev"
end tell
EOF
}

# Main execution
main() {
    # Change to a safe directory
    cd "$HOME"
    
    echo ""
    echo "╔══════════════════════════════════════════════╗"
    echo "║        Chatbot Dashboard Installer          ║"
    echo "║              macOS Version                   ║"
    echo "╚══════════════════════════════════════════════╝"
    echo ""
    
    check_prerequisites
    
    # Show the main menu
    if show_main_menu; then
        # Menu handled everything, exit gracefully
        echo ""
        print_success "Operation completed successfully!"
        echo ""
        exit 0
    else
        # Menu indicated we should proceed with fresh installation
        clone_repository
        install_dependencies
        start_application
        
        echo ""
        print_success "Installation completed successfully!"
        echo ""
        echo "To run the application again later:"
        echo "cd $INSTALL_DIR && npm run dev"
        echo ""
    fi
}

# Handle script interruption
trap 'echo -e "\n${YELLOW}Installation interrupted.${NC}"; exit 1' INT

# Run main function
main "$@"
