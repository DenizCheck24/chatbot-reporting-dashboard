#!/bin/bash

# Chatbot Dashboard Installer - Mac App Version
# This version is designed to be run by double-clicking on macOS

# Get the directory where this app bundle is located
APP_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
SCRIPT_DIR="$(dirname "$APP_DIR")"

# Configuration
REPO_URL="https://github.com/timbrennecke/chatbot-reporting-dashboard.git"
APP_NAME="chatbot-reporting-dashboard"
INSTALL_DIR="${HOME}/Desktop/${APP_NAME}"
NODE_MIN_VERSION="18"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to show dialog on macOS
show_dialog() {
    local title="$1"
    local message="$2"
    local type="${3:-informational}"
    
    osascript -e "display dialog \"$message\" with title \"$title\" with icon $type buttons {\"OK\"} default button \"OK\""
}

show_error_dialog() {
    local title="$1"
    local message="$2"
    
    osascript -e "display dialog \"$message\" with title \"$title\" with icon stop buttons {\"OK\"} default button \"OK\""
}

show_choice_dialog() {
    local title="$1"
    local message="$2"
    
    result=$(osascript -e "display dialog \"$message\" with title \"$title\" with icon question buttons {\"No\", \"Yes\"} default button \"Yes\"" 2>/dev/null || echo "No")
    echo "$result"
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check Node.js version
check_node_version() {
    if command_exists node; then
        local node_version=$(node -v | cut -d 'v' -f 2 | cut -d '.' -f 1)
        if [ "$node_version" -ge "$NODE_MIN_VERSION" ]; then
            return 0
        else
            return 1
        fi
    else
        return 1
    fi
}

# Function to install prerequisites automatically using Homebrew
install_prerequisites_automatically() {
    print_status "Installing prerequisites automatically..."
    
    # Check if Homebrew is installed
    if ! command_exists brew; then
        show_dialog "Installing Homebrew" "First, we need to install Homebrew (the package manager for macOS).\n\nThis will open Terminal and may ask for your password."
        
        # Install Homebrew
        osascript << EOF
tell application "Terminal"
    activate
    do script "/bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
end tell
EOF
        
        show_dialog "Homebrew Installation" "Please complete the Homebrew installation in Terminal, then run this installer again."
        exit 0
    fi
    
    # Install Node.js using Homebrew
    show_dialog "Installing Node.js" "Installing Node.js and npm using Homebrew.\n\nThis may take a few minutes..."
    
    osascript << EOF
tell application "Terminal"
    activate
    do script "brew install node && echo 'Installation complete! Please close this Terminal window and run the Chatbot Dashboard Installer again.'"
end tell
EOF
    
    show_dialog "Installation Started" "Node.js installation has started in Terminal.\n\nPlease wait for it to complete, then run this installer again."
    exit 0
}

# Function to show manual installation dialog
show_manual_install_dialog() {
    osascript << EOF
display dialog "Please install the required software manually:

🔧 Git: Download from https://git-scm.com/downloads
📦 Node.js: Download from https://nodejs.org/

For easier installation, you can also use Homebrew:
1. Install Homebrew: /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"
2. Install Git: brew install git
3. Install Node.js: brew install node

After installation, run this installer again." with title "Manual Installation Guide" with icon note buttons {"Open Git Download", "Open Node.js Download", "OK"} default button "OK"
EOF
    
    # Handle button clicks
    result=$?
    if [ $result -eq 0 ]; then
        # User clicked a button, open relevant pages
        open "https://git-scm.com/downloads" 2>/dev/null || true
        open "https://nodejs.org/" 2>/dev/null || true
    fi
}

# Function to check prerequisites
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    local missing_deps=""
    
    # Check Git
    if ! command_exists git; then
        missing_deps="${missing_deps}\n• Git"
    fi
    
    # Check Node.js
    if ! check_node_version; then
        missing_deps="${missing_deps}\n• Node.js v${NODE_MIN_VERSION}+"
    fi
    
    # Check npm
    if ! command_exists npm; then
        missing_deps="${missing_deps}\n• npm"
    fi
    
    if [ -n "$missing_deps" ]; then
        # Show error dialog with installation options
        choice=$(osascript -e "display dialog \"The following software is required but not installed:${missing_deps}\n\nWould you like to install them automatically using Homebrew?\" with title \"Missing Prerequisites\" with icon caution buttons {\"Cancel\", \"Install Manually\", \"Auto Install\"} default button \"Auto Install\"" 2>/dev/null || echo "Cancel")
        
        if [[ "$choice" == *"Auto Install"* ]]; then
            install_prerequisites_automatically
        elif [[ "$choice" == *"Install Manually"* ]]; then
            show_manual_install_dialog
            exit 1
        else
            exit 1
        fi
    fi
    
    print_success "All prerequisites are met!"
}

# Function to cleanup existing installation
cleanup_existing() {
    if [ -d "$INSTALL_DIR" ]; then
        print_warning "Existing installation found at $INSTALL_DIR"
        choice=$(show_choice_dialog "Existing Installation Found" "An existing installation was found at:\n$INSTALL_DIR\n\nDo you want to remove it and install fresh?")
        
        if [[ "$choice" == *"Yes"* ]]; then
            print_status "Removing existing installation..."
            rm -rf "$INSTALL_DIR"
            print_success "Existing installation removed."
            return 1
        else
            print_status "Updating existing installation..."
            cd "$INSTALL_DIR"
            if git fetch origin && git reset --hard origin/main; then
                return 0
            else
                print_error "Failed to update existing installation. Will do fresh install."
                rm -rf "$INSTALL_DIR"
                return 1
            fi
        fi
    fi
    return 1
}

# Function to clone repository
clone_repository() {
    print_status "Cloning repository from GitHub..."
    mkdir -p "$(dirname "$INSTALL_DIR")"
    if git clone "$REPO_URL" "$INSTALL_DIR"; then
        cd "$INSTALL_DIR"
        print_success "Repository cloned successfully!"
    else
        show_error_dialog "Installation Failed" "Failed to clone the repository. Please check your internet connection and try again."
        exit 1
    fi
}

# Function to install dependencies
install_dependencies() {
    print_status "Installing dependencies..."
    if npm install; then
        print_success "Dependencies installed successfully!"
    else
        show_error_dialog "Installation Failed" "Failed to install dependencies. Please try again."
        exit 1
    fi
}

# Function to start the application
start_application() {
    print_status "Starting the application..."
    
    show_dialog "Installation Complete" "🎉 Chatbot Dashboard is ready!\n\nThe application will now start in your browser.\nIf it doesn't open automatically, visit: http://localhost:3000\n\nTo stop the application, close this terminal window or press Ctrl+C."
    
    # Open Terminal and run the dev server
    osascript << EOF
tell application "Terminal"
    activate
    do script "cd '$INSTALL_DIR' && echo 'Starting Chatbot Dashboard...' && npm run dev"
end tell
EOF
}

# Main execution
main() {
    # Change to a safe directory
    cd "$HOME"
    
    echo ""
    echo "╔══════════════════════════════════════════════╗"
    echo "║        Chatbot Dashboard Installer          ║"
    echo "║              macOS Version                   ║"
    echo "╚══════════════════════════════════════════════╝"
    echo ""
    
    check_prerequisites
    
    # Check if we're updating existing installation
    if cleanup_existing; then
        cd "$INSTALL_DIR"
        install_dependencies
    else
        clone_repository
        install_dependencies
    fi
    
    start_application
    
    echo ""
    print_success "Installation completed successfully!"
    echo ""
    echo "To run the application again later:"
    echo "cd $INSTALL_DIR && npm run dev"
    echo ""
}

# Handle script interruption
trap 'echo -e "\n${YELLOW}Installation interrupted.${NC}"; exit 1' INT

# Run main function
main "$@"
